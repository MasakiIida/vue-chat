{"ast":null,"code":"import _asyncToGenerator from \"/Users/masakiiida/Documents/Project/Portfolio/vue-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"@/firebase/firebase\";\nimport SideBar from \"@/components/layouts/SideBar\";\nexport default {\n  components: {\n    SideBar: SideBar\n  },\n  created: function created() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var roomRef, roomDoc, chatRef, snapshot;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.roomId = _this.$route.query.room_id;\n              roomRef = firebase.firestore().collection(\"rooms\").doc(_this.roomId);\n              _context.next = 4;\n              return roomRef.get();\n\n            case 4:\n              roomDoc = _context.sent;\n\n              if (!roomDoc.exists) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 8;\n              return _this.$router.push(\"/\");\n\n            case 8:\n              _this.room = roomDoc.this.data();\n              chatRef = firebase.firestore().collection(\"chats\");\n              _context.next = 12;\n              return chatRef.get();\n\n            case 12:\n              snapshot = _context.sent;\n              snapshot.forEach(function (doc) {\n                _this.messages.push(doc.data());\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  data: function data() {\n    return {\n      messages: [],\n      body: \"\",\n      roomId: \"\",\n      room: null,\n      cards: [\"Today\"],\n      drawer: null,\n      links: [[\"mdi-inbox-arrow-down\", \"Inbox\"], [\"mdi-send\", \"Send\"], [\"mdi-delete\", \"Trash\"], [\"mdi-alert-octagon\", \"Spam\"]] //   invalid: false,\n\n    };\n  },\n  computed: {\n    invalid: function invalid() {\n      if (!this.body) {\n        return true;\n      }\n\n      return false;\n    }\n  },\n  methods: {\n    clear: function clear() {\n      this.body = \"\";\n    },\n    submit: function submit() {\n      this.messages.unshift({\n        message: this.body\n      });\n      this.body = \"\";\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AAEA;AACAA;AACAC;AADA,GADA;AAIAC,SAJA,qBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEAC,qBAHA,GAGAC,0DAHA;AAAA;AAAA,qBAIAD,aAJA;;AAAA;AAIAE,qBAJA;;AAAA,mBAKAA,cALA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMA,uBANA;;AAAA;AAQA;AAEAC,qBAVA,GAUAF,wCAVA;AAAA;AAAA,qBAWAE,aAXA;;AAAA;AAWAC,sBAXA;AAaAA;AACA;AACA,eAFA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,GApBA;AAqBAC;AAAA;AACAC,kBADA;AAEAC,cAFA;AAGAC,gBAHA;AAIAC,gBAJA;AAKAC,sBALA;AAMAC,kBANA;AAOAC,cACA,iCADA,EAEA,oBAFA,EAGA,uBAHA,EAIA,6BAJA,CAPA,CAaA;;AAbA;AAAA,GArBA;AAoCAC;AACAC,WADA,qBACA;AACA;AACA;AACA;;AACA;AACA;AANA,GApCA;AA4CAC;AACAC,SADA,mBACA;AACA;AACA,KAHA;AAIAC,UAJA,oBAIA;AACA;AAAAC;AAAA;AACA;AACA;AAPA;AA5CA","names":["components","SideBar","created","roomRef","firebase","roomDoc","chatRef","snapshot","data","messages","body","roomId","room","cards","drawer","links","computed","invalid","methods","clear","submit","message"],"sourceRoot":"src/views","sources":["ChatBoard.vue"],"sourcesContent":["<template>\n <v-app id=\"inspire\">\n  <SideBar />\n  <v-main>\n   <h1>{{ room.name }}</h1>\n   <v-container class=\"py-8 px-6\" fluid>\n    <v-row>\n     <v-col v-for=\"card in cards\" :key=\"card\" cols=\"12\">\n      <v-card>\n       <v-subheader>{{ card }}</v-subheader>\n\n       <v-list two-line>\n        <template v-for=\"(data, index) in messages\">\n         <v-list-item :key=\"index\">\n          <v-list-item-avatar color=\"grey darken-1\"> </v-list-item-avatar>\n\n          <v-list-item-content>\n           <v-list-item-subtitle class=\"message\">\n            {{ data.message }}\n           </v-list-item-subtitle>\n          </v-list-item-content>\n         </v-list-item>\n\n         <v-divider v-if=\"n !== 6\" :key=\"`divider-${index}`\" inset></v-divider>\n        </template>\n       </v-list>\n      </v-card>\n     </v-col>\n    </v-row>\n   </v-container>\n   <v-textarea\n    v-model=\"body\"\n    append-outer-icon=\"mdi-comment\"\n    class=\"mx-2\"\n    label=\"メッセージを送信する\"\n    rows=\"3\"\n    auto-grow\n   ></v-textarea>\n   <v-btn class=\"mr-4\" type=\"submit\" :disabled=\"invalid\" @click=\"submit\">\n    submit\n   </v-btn>\n   <v-btn @click=\"clear\"> clear </v-btn>\n  </v-main>\n </v-app>\n</template>\n\n<script>\nimport firebase from \"@/firebase/firebase\";\nimport SideBar from \"@/components/layouts/SideBar\";\n\nexport default {\n components: {\n  SideBar,\n },\n async created() {\n  this.roomId = this.$route.query.room_id;\n\n  const roomRef = firebase.firestore().collection(\"rooms\").doc(this.roomId);\n  const roomDoc = await roomRef.get();\n  if (roomDoc.exists) {\n   await this.$router.push(\"/\");\n  }\n  this.room = roomDoc.this.data();\n\n  const chatRef = firebase.firestore().collection(\"chats\");\n  const snapshot = await chatRef.get();\n\n  snapshot.forEach((doc) => {\n   this.messages.push(doc.data());\n  });\n },\n data: () => ({\n  messages: [],\n  body: \"\",\n  roomId: \"\",\n  room: null,\n  cards: [\"Today\"],\n  drawer: null,\n  links: [\n   [\"mdi-inbox-arrow-down\", \"Inbox\"],\n   [\"mdi-send\", \"Send\"],\n   [\"mdi-delete\", \"Trash\"],\n   [\"mdi-alert-octagon\", \"Spam\"],\n  ],\n  //   invalid: false,\n }),\n computed: {\n  invalid() {\n   if (!this.body) {\n    return true;\n   }\n   return false;\n  },\n },\n methods: {\n  clear() {\n   this.body = \"\";\n  },\n  submit() {\n   this.messages.unshift({ message: this.body });\n   this.body = \"\";\n  },\n },\n};\n</script>\n\n<style scoped>\n.message {\n text-align: left;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}