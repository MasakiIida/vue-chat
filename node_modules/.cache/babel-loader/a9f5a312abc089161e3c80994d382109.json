{"ast":null,"code":"import _asyncToGenerator from \"/Users/masakiiida/Documents/Project/Portfolio/vue-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"@/firebase/firebase\";\nexport default {\n  data: function data() {\n    return {\n      valid: true,\n      name: \"\",\n      nameRules: [function (v) {\n        return !!v || \"ユーザー名を入力してください\";\n      }, function (v) {\n        return v && v.length <= 10 || \"ユーザー名は10文字以内で入力してください\";\n      }],\n      email: \"\",\n      emailRules: [function (v) {\n        return !!v || \"メールアドレスを入力してください\";\n      }, function (v) {\n        return /.+@.+\\..+/.test(v) || \"メールアドレスが不正です\";\n      }],\n      password: \"\",\n      passwordRules: [function (v) {\n        return !!v || \"パスワードを入力してください\";\n      }, function (v) {\n        return v && v.length >= 6 || \"パスワードは6文字以上で入力してください\";\n      }]\n    };\n  },\n  computed: {\n    isValid: function isValid() {\n      return !this.valid;\n    }\n  },\n  methods: {\n    validate: function validate() {\n      this.$refs.form.validate();\n    },\n    reset: function reset() {\n      this.$refs.form.reset();\n    },\n    resetValidation: function resetValidation() {\n      this.$refs.form.resetValidation();\n    },\n    submit: function submit() {\n      var _this = this;\n\n      firebase.auth().createUserWithEmailAndPassword(this.email, this.password).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  console.log(\"success\", result);\n                  _context.next = 3;\n                  return result.user.updateProfile({\n                    displayName: _this.name\n                  });\n\n                case 3:\n                  console.log(\"update user\", result.user); // サインアップに成功したらログインページにリダイレクト\n\n                  _this.$router.push(\"/login\");\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (error) {\n        console.log(\"success\", error);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AAEA;AACAA;AAAA;AACAC,iBADA;AAEAC,cAFA;AAGAC,kBACA;AAAA;AAAA,OADA,EAEA;AAAA;AAAA,OAFA,CAHA;AAOAC,eAPA;AAQAC,mBACA;AAAA;AAAA,OADA,EAEA;AAAA;AAAA,OAFA,CARA;AAYAC,kBAZA;AAaAC,sBACA;AAAA;AAAA,OADA,EAEA;AAAA;AAAA,OAFA;AAbA;AAAA,GADA;AAmBAC;AACAC,WADA,qBACA;AACA;AACA;AAHA,GAnBA;AAwBAC;AACAC,YADA,sBACA;AACA;AACA,KAHA;AAIAC,SAJA,mBAIA;AACA;AACA,KANA;AAOAC,mBAPA,6BAOA;AACA;AACA,KATA;AAUAC,UAVA,oBAUA;AAAA;;AACAC,eACAC,IADA,GAEAC,8BAFA,CAEA,UAFA,EAEA,aAFA,EAGAC,IAHA;AAAA,2EAGA;AAAA;AAAA;AAAA;AAAA;AACAC;AADA;AAAA,yBAEAC;AAAAC;AAAA,oBAFA;;AAAA;AAGAF,0DAHA,CAKA;;AACA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHA;;AAAA;AAAA;AAAA;AAAA,WAWAG,KAXA,CAWA;AACAH;AACA,OAbA;AAcA;AAzBA;AAxBA","names":["data","valid","name","nameRules","email","emailRules","password","passwordRules","computed","isValid","methods","validate","reset","resetValidation","submit","firebase","auth","createUserWithEmailAndPassword","then","console","result","displayName","catch"],"sourceRoot":"src/views","sources":["SignUp.vue"],"sourcesContent":["<template>\n <v-app>\n  <div class=\"login-wrap\">\n   <v-card class=\"login-form\">\n    <v-card-title class=\"login-title\">Sign Up</v-card-title>\n    <v-card-subtitle>ユーザー情報をご入力ください。</v-card-subtitle>\n    <v-btn text color=\"light-blue\" to=\"login\">ログインはこちら</v-btn>\n    <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n     <v-text-field\n      v-model=\"name\"\n      :rules=\"nameRules\"\n      label=\"User name\"\n      required\n     ></v-text-field>\n\n     <v-text-field\n      v-model=\"email\"\n      :rules=\"emailRules\"\n      label=\"E-mail\"\n      required\n     ></v-text-field>\n\n     <v-text-field\n      v-model=\"password\"\n      :rules=\"passwordRules\"\n      type=\"password\"\n      label=\"Password\"\n      required\n     ></v-text-field>\n\n     <v-btn\n      color=\"success\"\n      class=\"login-btn\"\n      @click=\"submit\"\n      :disabled=\"isValid\"\n      >SIGN UP</v-btn\n     >\n     <v-btn>Clear</v-btn> </v-form\n    ><v-alert dense outlined type=\"error\">\n     I'm a dense alert with the <strong>outlined</strong> prop and a\n     <strong>type</strong> of error\n    </v-alert>\n   </v-card>\n  </div>\n </v-app>\n</template>\n\n<script>\nimport firebase from \"@/firebase/firebase\";\n\nexport default {\n data: () => ({\n  valid: true,\n  name: \"\",\n  nameRules: [\n   (v) => !!v || \"ユーザー名を入力してください\",\n   (v) => (v && v.length <= 10) || \"ユーザー名は10文字以内で入力してください\",\n  ],\n  email: \"\",\n  emailRules: [\n   (v) => !!v || \"メールアドレスを入力してください\",\n   (v) => /.+@.+\\..+/.test(v) || \"メールアドレスが不正です\",\n  ],\n  password: \"\",\n  passwordRules: [\n   (v) => !!v || \"パスワードを入力してください\",\n   (v) => (v && v.length >= 6) || \"パスワードは6文字以上で入力してください\",\n  ],\n }),\n computed: {\n  isValid() {\n   return !this.valid;\n  },\n },\n methods: {\n  validate() {\n   this.$refs.form.validate();\n  },\n  reset() {\n   this.$refs.form.reset();\n  },\n  resetValidation() {\n   this.$refs.form.resetValidation();\n  },\n  submit() {\n   firebase\n    .auth()\n    .createUserWithEmailAndPassword(this.email, this.password)\n    .then(async (result) => {\n     console.log(\"success\", result);\n     await result.user.updateProfile({ displayName: this.name });\n     console.log(\"update user\", result.user);\n\n     // サインアップに成功したらログインページにリダイレクト\n     this.$router.push(\"/login\");\n    })\n    .catch((error) => {\n     console.log(\"success\", error);\n    });\n  },\n },\n};\n</script>\n\n<style>\n.login-wrap {\n padding: 100px;\n}\n\n.login-form {\n width: 600px;\n margin: auto;\n padding: 30px;\n}\n\n.login-title {\n display: inline-block;\n}\n\n.login-btn {\n margin-right: 20px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}